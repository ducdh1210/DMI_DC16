edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = edata[rowMeans(edata) > 10, ]
glm3 = glm(edata[1, ] ~ pdata$strain,family="poisson")
tidy(glm3)
glm.nb1 = glm.nb(edata[1, ] ~ pdata$strain)
tidy(glm.nb1)
de = DESeqDataSetFromMatrix(edata, pdata, ~strain)
glm_all_nb = DESeq(de)
result_nb = results(glm_all_nb)
hist(result_nb$stat)
pdata$strain
edata[1,]
names(edata[1,])
pdata
pdata[names(edata[1,]), strain == "C57BL/6J"]
pdata[names(edata[1,]),]$strain ==  "C57BL/6J"
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
data(bladderdata)
pheno = pData(bladderEset)
edata = exprs(bladderEset)
View(edata)
?bladderEset
?bladder
head(pheno)
pheno$batch
pheno$outcome
pheno$cancer
set.seed(123)
cancerjit = jitter(as.numeric(pheno$cancer))
cancerjit
lm1 = lm(edata[1,] ~ 1)
lm2 = lm(edata[1,] ~ pheno$cancer)
par(mfrow=c(1,2))
plot(edata[1,] ~ cancerjit,type="p",xaxt="n",xlab="Cancer Status",ylab="Expression",pch=19,col=as.numeric(pheno$cancer))
axis(1,at=c(1,2,3),c("Biopsy","Cancer","Normal"))
abline(lm1,col="darkgrey",lwd=5)
plot(edata[1,] ~ cancerjit,type="p",xaxt="n",xlab="Cancer Status",ylab="Expression",pch=19,col=as.numeric(pheno$cancer))
axis(1,at=c(1,2,3),c("Biopsy","Cancer","Normal"))
boxplot(lm2$fitted~pheno$cancer,add=T,border=1:3)
```
## Plot the residuals
```{r}
par(mfrow=c(1,2))
plot(lm1$residuals ~ cancerjit,type="p",xaxt="n",xlab="Cancer Status",ylab="Expression",pch=19,col=as.numeric(pheno$cancer),ylim=c(-1.1,1.1))
axis(1,at=c(1,2,3),c("Biopsy","Cancer","Normal"))
plot(lm2$residuals ~ cancerjit,type="p",xaxt="n",xlab="Cancer Status",ylab="Residuals",pch=19,col=as.numeric(pheno$cancer),ylim=c(-1.1,1.1))
axis(1,at=c(1,2,3),c("Biopsy","Cancer","Normal"))
```
## Session information
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata=pData(bot)
edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
tstats_obj = rowttest(edata, pdata$strain)
tstats_obj = rowttests(edata, pdata$strain)
dim(edata)
pdata$strain
hist(tstats_obj$statistic,col=2)
tstats_obj$statistic
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
names(fstats_obj)
fstats_obj$p.value
hist(fstats_obj$statistic,col=2)
?eBayes
mod = model.matrix(~ pdata$strain)
?model.matrix
mod
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
head(ebayes_limma$t)
plot(ebayes_limma$t[,2],-tstats_obj$statistic,col=4,
xlab="Moderated T-stat",ylab="T-stat")
abline(c(0,1),col="darkgrey",lwd=3)
mod_adj = model.matrix(~ pdata$strain + as.factor(pdata$lane.number))
fit_limma_adj = lmFit(edata,mod_adj)
ebayes_limma_adj = eBayes(fit_limma_adj)
head(ebayes_limma_adj$t)
plot(ebayes_limma_adj$t[,2],-tstats_obj$statistic,col=3,
xlab="Moderated T-stat",ylab="T-stat")
abline(c(0,1),lwd=3,col="darkgrey")
?lmFit
plot(ebayes_limma_adj$t[,2],-tstats_obj$statistic,col=3,
xlab="Moderated T-stat",ylab="T-stat")
abline(c(0,1),lwd=3,col="darkgrey")
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
names(fstats_obj
)
fstats_obj$statistic
fstats_obj = rowFtests(edata[1,],as.factor(pdata$lane.number))
fstats_obj = rowFtests(edata[1:10,],as.factor(pdata$lane.number))
fstats_obj$statistic
fstats_obj = rowFtests(edata[1:2,],as.factor(pdata$lane.number))
fstats_obj$statistic
tstats_obj = rowttests(edata,pdata$strain)
names(tstats_obj)
tstats_obj$statistic
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
names(fstats_obj)
hist(fstats_obj$p.value)
summary(fstats_obj$p.value)
boxplot(edata[1,] ~ pdata$lane.number)
points(edata[1,]  ~ jitter(as.numeric(pdata$lane.number)),
col=as.numeric(pdata$lane.number),
pch=19)
?eBays
?eBayes
mod_lane = model.matrix(~ as.factor(pdata$lane.number))
fit_limma_lane = lmFit(edata[1:3],mod_lane)
ebayes_limma_lane = eBayes(fit_limma_lane)
head(ebayes_limma_lane$t)
head(pdata)
dim(pdata)
mod_lane = model.matrix(~ as.factor(pdata[1:7,]$lane.number))
fit_limma_lane = lmFit(edata[,1:7],mod_lane)
ebayes_limma_lane = eBayes(fit_limma_lane)
head(ebayes_limma_lane$t)
head(pdata)
edata[1:7,]
mod_lane = model.matrix(~ as.factor(pdata$lane.number))
fit_limma_lane = lmFit(edata,mod_lane)
ebayes_limma_lane = eBayes(fit_limma_lane)
head(ebayes_limma_lane$t)
ebayes_limma_lane$t
tstats_obj = rowttests(edata,pdata$strain)
dim(edata)
tstats_obj = rowftests(edata,pdata$strain)
dim(tstats_obj$statistic)
length(tstats_obj$statistic)
head(tstats_obj$statistic)
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
length(fstats_obj$statistic)
fstats_obj = rowttests(edata,as.factor(pdata$lane.number))
mod = model.matrix(~ pdata$strain)
fit_limma = lmFit(edata,mod)
class(fit_limma)
names(fit_limma)
fit_limma$coefficients
head(fit_limma$coefficients)
tstats_obj$statistic[1:5]
ebayes_limma = eBayes(fit_limma)
head(ebayes_limma$coefficients)
-tstats_obj$statistic[1:5]
mod = model.matrix(~ pdata$strain)
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
head(ebayes_limma$t)
mod_lane = model.matrix(~ as.factor(pdata$lane.number))
mod_line = model.matrix(~ as.factor(pdata$lane.number))
fit_limma_line = lmFit(edata, mod_line)
class(fit_limma_line)
mod_lane = model.matrix(~ as.factor(pdata$lane.number))
fit_limma_lane = lmFit(edata,mod_lane)
head(fit_limma_lane$coefficients)
dim(fit_limma_lane$coefficients)
ebayes_limma_lane = eBayes(fit_limma_lane)
head(fit_limma_lane$t)
head(ebayes_limma_lane$coefficients)
head(ebayes_limma_lane$t)
head(ebayes_limma_lane$F.p.value)
head(ebayes_limma_lane$F)
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
names(fstats_obj)
dim(fstats_obj)
head(fstats_obj$statistic)
fstats_obj = rowFtests(edata,as.factor(pdata$lane.number))
names(fstats_obj)
top_lane = topTable(ebayes_limma_lane, coef=2:7,
number=dim(edata)[1],sort.by="none")
head(top_lane)
head(top_lane$F)
dim(top_lane)
0.0545143060 + 0.02502244 + 0.16845444 + 0.4768296 + 0.31460805
0.0545143060 + 0.02502244 + 0.16845444 + 0.4768296 + 0.31460805 + 0.24748800
1.286917 / 6
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata=pData(bot)
edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
tstats_obj = rowttests(edata,pdata$strain)
hist(tstats_obj$statistic,col=2,xlim=c(-5,2))
par(mfrow = c(1,1))
hist(tstats_obj$statistic,col=2,xlim=c(-5,2))
hist(tstats_obj$statistic,col=2)
par(mfrow = c(1,1))
tstats_obj = rowttests(edata,pdata$strain)
hist(tstats_obj$statistic,col=2,xlim=c(-5,2))
tstats_obj = rowttests(edata,pdata$strain)
hist(tstats_obj$statistic)
tstats_obj
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata=pData(bot)
edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
head(edata)
tstats_obj = rowttests(edata,pdata$strain)
hist(tstats_obj$statistic,col=2,xlim=c(-5,2))
set.seed(135)
strain = pdata$strain
strain0 = sample(strain)
strain
strain0
tstats_obj0 = rowttests(edata,strain0)
hist(tstats_obj0$statistic,col=2,xlim=c(-5,2))
quantile(tstats_obj0$statistic)
quantile(tstats_obj$statistic)
install.packages("MatrixEQTL")
source("http://www.bioconductor.org/biocLite.R")
biocLite("goseq")
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
head(supportedGeneIDs())
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
View(temp_data)
expr= temp_data[,-1]
rownames(expr) = temp_data[,1]
expr = expr[rowMeans(expr) > 5,]
grp=factor(rep(c("Control","Treated"),times=c(4,3)))
pdata  = data.frame(grp)
de = DESeqDataSetFromMatrix(expr, pdata, ~grp)
de_fit = DESeq(de)
de_results = results(de_fit)
genes = as.integer(de_results$padj < 0.05)
not_na = !is.na(genes)
names(genes) = rownames(expr)
genes = genes[not_na]
?supportedGenomes
?rtracklayer
head(supportedGenomes(),n=12)[,1:4]
pwf=nullp(genes,"hg19","ensGene")
head(pwf)
pwf=nullp(genes,"hg19","ensGene")
head(pwf)
GO.wall=goseq(pwf,"hg19","ensGene")
GO.MF=goseq(pwf,"hg19","ensGene",test.cats=c("GO:MF"))
head(GO.MF)
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
expr= temp_data[,-1]
rownames(expr) = temp_data[,1]
expr = expr[rowMeans(expr) > 5,]
grp=factor(rep(c("Control","Treated"),times=c(4,3)))
pdata  = data.frame(grp)
dim(expr)
de = DESeqDataSetFromMatrix(expr, pdata, ~grp)
de_fit = DESeq(de)
de_results = results(de_fit)
dim(de_results)
head(de_results)
genes = as.integer(de_results$padj < 0.05)
length(genes)
genes[1:10]
(de_results$padj < 0.05)[1:10]
genes[1:10]
sum(is.na(genes))
names(genes) = rownames(expr)
genes = genes[not_na]
genes[1:3]
str(pwdf)
pwf=nullp(genes,"hg19","ensGene")
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(MatrixEQTL)
library(broom)
library(limma)
library(org.Mm.eg.db)
source("https://bioconductor.org/biocLite.R")
biocLite("org.Mm.eg.db")
supportedGenomes()
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata_bot=pData(bot)
fdata_bot = featureData(bot)
edata = exprs(bot)
#remove low expression gene
fdata_bot = fdata_bot[rowMeans(edata) > 5]
edata = edata[rowMeans(edata) > 5, ]
#transform data
edata = log(edata + 1)
#fit limma model
mod = model.matrix(~ pdata_bot$strain)
fit_limma = lmFit(edata, mod)
ebayes_limma = eBayes(fit_limma)
limma_output = topTable(ebayes_limma, number = dim(edata)[1], adjust.method="BH", sort="none")
names(limma_output)
limma_pvals_adj = limma_output$adj.P.Val
limma_pvals_adj[1:10]
hist(limma_pvals_adj, col = 2)
#count p value less than 0.05
sum(limma_pvals_adj < 0.05)
#find the first gene showed significant differential expression
rownames(edata)[34]#the 34th
limma_pvals_adj < 0.05
(limma_pvals_adj < 0.05)[1:100]
(limma_pvals_adj < 0.05) == TRUE
which(limma_pvals_adj < 0.05)
which(limma_pvals_adj < 0.05)[1:10]
genes = as.integer(limma_pvals_adj < 0.05)
names(genes) = rownames(edata)
not_na = !is.na(genes)
genes = genes[not_na]
head(genes)
sum(genes)
#GO cluster analysis
pwf=nullp(genes,"mm9","ensGene")
head(pwf)
GO.wall=goseq(pwf,"mm9","ensGene")
head(GO.wall)
View(GO.wall)
GO.top10 = GO.wall[1:10,1]
GO.top10
mod_adj = model.matrix(~ pdata_bot$strain + pdata_bot$lane.number)
fit_limma_adj = lmFit(edata, mod_adj)
ebayes_limma_adj = eBayes(fit_limma_adj)
limma_output_adj = topTable(ebayes_limma_adj, number = dim(edata)[1], adjust.method="BH",sort="none")
limma_pvals_adj_adj = limma_output_adj$adj.P.Val
hist(limma_pvals_adj_adj, col = 2)
sum(limma_pvals_adj_adj < 0.05)
#get differential expressed gene list
genes_adj = as.integer(limma_pvals_adj_adj < 0.05)
not_na = !is.na(genes_adj)
names(genes_adj) = rownames(edata)
genes_adj = genes_adj[not_na]
head(genes_adj)
#find common GO category between non-correction and corrected with lanes
pwf_adj=nullp(genes_adj,"mm9","ensGene")
head(pwf)
GO.wall_adj=goseq(pwf_adj,"mm9","ensGene")
GO.top10_adj = GO.wall_adj[1:10,1]
length(intersect(GO.top10, GO.top10_adj))
length(intersect(GO.top10, GO.top10_adj))
GO.top10_adj = GO.wall_adj[1:10,1]
GO.wall_adj=goseq(pwf_adj,"mm9","ensGene")
length(intersect(GO.top10, GO.top10_adj))
library(BiocInstaller)
source("https://bioconductor.org/biocLite.R")
biocLite("Homo.sapiens")
library("Homo.sapiens")
Homo.sapiens
select(Homo.sapiens, keys="4488", columns=c("SYMBOL","TXNAME"), keytype="ENTREZID")
txs <- transcripts(Homo.sapiens, columns=c("TXNAME","SYMBOL"))
txs
cols <- c("SYMBOL", "GENENAME")
select(org.Hs.eg.db, keys=ensids, columns=cols, keytype="ENSEMBL")
library(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
cols <- c("SYMBOL", "GENENAME")
select(org.Hs.eg.db, keys=ensids, columns=cols, keytype="ENSEMBL")
ensids <- c("ENSG00000130720", "ENSG00000103257", "ENSG00000156414",
"ENSG00000144644", "ENSG00000159307", "ENSG00000144485")
library(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
cols <- c("SYMBOL", "GENENAME")
select(org.Hs.eg.db, keys=ensids, columns=cols, keytype="ENSEMBL")
library(biomaRt)
head(listMarts(), 3)                      ## list the marts
head(listDatasets(useMart("ensembl")), 3) ## mart datasets
ensembl <-                                ## fully specified mart
useMart("ensembl", dataset = "hsapiens_gene_ensembl")
head(listFilters(ensembl), 3)             ## filters
myFilter <- "chromosome_name"
substr(filterOptions(myFilter, ensembl), 1, 50) ## return values
myValues <- c("21", "22")
head(listAttributes(ensembl), 3)          ## attributes
myAttributes <- c("ensembl_gene_id","chromosome_name")
## assemble and query the mart
res <- getBM(attributes =  myAttributes, filters =  myFilter,
values =  myValues, mart = ensembl)
res
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol','hgnc_id','uniprot_swissprot'),filters = 'ensembl_gene_id', values = 'ENSG00000139618', mart = ensembl)
hgnc_swissprot
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol','hgnc_id','uniprot_swissprot'),
filters = 'ensembl_gene_id', values = 'ENSG00000115934', mart = ensembl)
hgnc_swissprot
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol','hgnc_id','uniprot_swissprot'),
filters = 'ensembl_gene_id', values = 'ENSG00000124915', mart = ensembl)
hgnc_swissprot
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol','hgnc_id','uniprot_swissprot'),
filters = 'ensembl_gene_id', values = 'ENSG00000100181', mart = ensembl)
hgnc_swissprot
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol','hgnc_id','uniprot_swissprot'),
filters = 'ensembl_gene_id', values = 'ENSG00000117242', mart = ensembl)
hgnc_swissprot
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol','hgnc_id','uniprot_swissprot'),
filters = 'ensembl_gene_id', values = 'ENSG00000124915', mart = ensembl)
hgnc_swissprot
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id',,'hgnc_symbol'),
filters = 'ensembl_gene_id', values = 'ENSG00000124915', mart = ensembl)
hgnc_swissprot
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.NCBI.GRCh38")
ensids <- c("ENSG00000130720", "ENSG00000103257", "ENSG00000156414",
"ENSG00000144644", "ENSG00000159307", "ENSG00000144485")
library(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
cols <- c("SYMBOL", "GENENAME")
select(org.Hs.eg.db, keys=ensids, columns=cols, keytype="ENSEMBL")
library("BSgenome.Hsapiens.NCBI.GRCh38")
ensids <- c("ENSG00000130720", "ENSG00000103257", "ENSG00000156414",
"ENSG00000144644", "ENSG00000159307", "ENSG00000144485")
library("BSgenome.Hsapiens.NCBI.GRCh38")
select(BSgenome.Hsapiens.NCBI.GRCh38, keys=ensids, columns=cols, keytype="ENSEMBL")
BSgenome.Hsapiens.NCBI.GRCh38
genome <- BSgenome.Hsapiens.NCBI.GRCh38
seqlengths(genome)
genome[["1"]]
genome[["2"]]
genome[["1054"]]
setwd("/media/ducdo/UUI/Bioinformatics/DMI_DreamChallenge")
load(".RData")
rm(ls())
rm(list = ls())
load(".RData")
setwd("/media/ducdo/UUI/Bioinformatics/DMI_DreamChallenge/CoExpression_analysis")
library('gplots')
library('ggplot2')
library('knitr')
library('limma')
library('reshape2')
library('RColorBrewer')
library('WGCNA')
allowWGCNAThreads()
gene_tree <- hclust(as.dist(1 - pp2_adjM), method="average")
rm(list = ls()[-which(ls() == "ppi_2" )])
temp_pp2 = ppi_2
colnames(temp_pp2) = c("V1","V2","weight"); head(temp_pp2)
temp_pp2$V1 = paste("G",temp_pp2$V1,sep = "")
temp_pp2$V2 = paste("G",temp_pp2$V2,sep = "")
pp2_igraph = graph.data.frame(d = temp_pp2, directed = F);
library('gplots')
library('ggplot2')
library('knitr')
library('limma')
library('reshape2')
library('RColorBrewer')
library('WGCNA')
pp2_igraph = graph.data.frame(d = temp_pp2, directed = F);
pp2_igraph = graph.data.frame(d = temp_pp2, directed = F);
library('gplots')
library('ggplot2')
library('knitr')
library('limma')
library('reshape2')
library('RColorBrewer')
library('WGCNA')
library(igraph)
rm(list = ls()[-which(ls() == "ppi_2" )])
temp_pp2 = ppi_2
colnames(temp_pp2) = c("V1","V2","weight"); head(temp_pp2)
temp_pp2$V1 = paste("G",temp_pp2$V1,sep = "")
temp_pp2$V2 = paste("G",temp_pp2$V2,sep = "")
pp2_igraph = graph.data.frame(d = temp_pp2, directed = F);
pp2_adjMatrix = get.adjacency(pp2_igraph, attr = "weight")
pp2_adjMatrix@Dim # [1] 12420 12420
pp2_adjM = as.matrix(pp2_adjMatrix)
gene_tree <- hclust(as.dist(1 - pp2_adjM), method="average")
